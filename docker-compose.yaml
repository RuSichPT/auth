services:
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./workshop/redis/redis-data:/data
    environment:
      - INSIGHT_WEB_PORT=8001
    command: [ "redis-server", "--appendonly", "yes" ]
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      retries: 3
      timeout: 5s

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDISINSIGHT_HOST=0.0.0.0
      - REDISINSIGHT_ACCEPT_LICENSE=true  # Accept EULA and Privacy Settings
    ports:
      - "5540:5540"
    volumes:
      - ./workshop/redis/redisinsight-data:/db
    depends_on:
      - redis

  postgres-server:
    container_name: postgres-server
    hostname: postgresql
    image: postgres:14.6-alpine
    volumes:
      - ./workshop/postgres/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=auth
      - POSTGRES_USER=auth
      - POSTGRES_DB=auth
    ports:
      - 5432:5432
    restart: always

  init:
    image: python:3.12-alpine
    depends_on:
      - postgres-server
    environment:
      PGHOST: postgresql
      PGPORT: 5432
      PGUSER: auth
      PGPASSWORD: auth
      PGDATABASE: auth
    volumes:
      - ./workshop/init/init.py:/init.py
      - ./workshop/init/init.sql:/init.sql
      - ./workshop/init/authdata.sql:/authdata.sql
      - ./workshop/init/authhierarchy.sql:/authhierarchy.sql
      - ./workshop/init/authids.sql:/authids.sql
      - ./workshop/init/banhistory.sql:/banhistory.sql
      - ./workshop/init/createauthidtemplate.sql:/createauthidtemplate.sql
      - ./workshop/init/datatypes.sql:/datatypes.sql
      - ./workshop/init/devicetokens.sql:/devicetokens.sql
      - ./workshop/init/hierarchydata.sql:/hierarchydata.sql
      - ./workshop/init/hierarchypermission.sql:/hierarchypermission.sql
      - ./workshop/init/hierarchyrole.sql:/hierarchyrole.sql
      - ./workshop/init/hierarchysettings.sql:/hierarchysettings.sql
      - ./workshop/init/loginccode.sql:/loginccode.sql
      - ./workshop/init/oathauthenticator.sql:/oathauthenticator.sql
      - ./workshop/init/permissioncatalog.sql:/permissioncatalog.sql
      - ./workshop/init/permissions.sql:/permissions.sql
      - ./workshop/init/privatedata.sql:/privatedata.sql
      - ./workshop/init/rolepermissions.sql:/rolepermissions.sql
      - ./workshop/init/roles.sql:/roles.sql
      - ./workshop/init/rsakeys.sql:/rsakeys.sql
    entrypoint: [ "sh", "-c", "pip install psycopg2-binary && python /init.py" ]
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki:/loki

  grafana:
    container_name: grafana
    build: 'monitoring/grafana'
    ports:
      - 3000:3000
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.44.0
    user: root
    command:
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --log.level=debug
    ports:
      - 9090:9090
    volumes:
      - ./monitoring/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
      - ./monitoring/prometheus:/prometheus

  auth-app:
    build: .
    container_name: auth
    ports:
      - 8080:8080
    environment:
      - APP_PROF=docker
      - LOKI=http://loki:3100
    depends_on:
      - postgres-server
      - redis
      - redisinsight
      - grafana
      - prometheus
      - loki